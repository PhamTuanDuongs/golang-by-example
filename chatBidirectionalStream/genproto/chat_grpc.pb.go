// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/chat.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceChatClient is the client API for ServiceChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceChatClient interface {
	ChatA(ctx context.Context, opts ...grpc.CallOption) (ServiceChat_ChatAClient, error)
	ChatB(ctx context.Context, opts ...grpc.CallOption) (ServiceChat_ChatBClient, error)
	ChatC(ctx context.Context, opts ...grpc.CallOption) (ServiceChat_ChatCClient, error)
}

type serviceChatClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceChatClient(cc grpc.ClientConnInterface) ServiceChatClient {
	return &serviceChatClient{cc}
}

func (c *serviceChatClient) ChatA(ctx context.Context, opts ...grpc.CallOption) (ServiceChat_ChatAClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceChat_ServiceDesc.Streams[0], "/Chat.ServiceChat/ChatA", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceChatChatAClient{stream}
	return x, nil
}

type ServiceChat_ChatAClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceChatChatAClient struct {
	grpc.ClientStream
}

func (x *serviceChatChatAClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceChatChatAClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceChatClient) ChatB(ctx context.Context, opts ...grpc.CallOption) (ServiceChat_ChatBClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceChat_ServiceDesc.Streams[1], "/Chat.ServiceChat/ChatB", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceChatChatBClient{stream}
	return x, nil
}

type ServiceChat_ChatBClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceChatChatBClient struct {
	grpc.ClientStream
}

func (x *serviceChatChatBClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceChatChatBClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceChatClient) ChatC(ctx context.Context, opts ...grpc.CallOption) (ServiceChat_ChatCClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceChat_ServiceDesc.Streams[2], "/Chat.ServiceChat/ChatC", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceChatChatCClient{stream}
	return x, nil
}

type ServiceChat_ChatCClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceChatChatCClient struct {
	grpc.ClientStream
}

func (x *serviceChatChatCClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceChatChatCClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceChatServer is the server API for ServiceChat service.
// All implementations must embed UnimplementedServiceChatServer
// for forward compatibility
type ServiceChatServer interface {
	ChatA(ServiceChat_ChatAServer) error
	ChatB(ServiceChat_ChatBServer) error
	ChatC(ServiceChat_ChatCServer) error
	mustEmbedUnimplementedServiceChatServer()
}

// UnimplementedServiceChatServer must be embedded to have forward compatible implementations.
type UnimplementedServiceChatServer struct {
}

func (UnimplementedServiceChatServer) ChatA(ServiceChat_ChatAServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatA not implemented")
}
func (UnimplementedServiceChatServer) ChatB(ServiceChat_ChatBServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatB not implemented")
}
func (UnimplementedServiceChatServer) ChatC(ServiceChat_ChatCServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatC not implemented")
}
func (UnimplementedServiceChatServer) mustEmbedUnimplementedServiceChatServer() {}

// UnsafeServiceChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceChatServer will
// result in compilation errors.
type UnsafeServiceChatServer interface {
	mustEmbedUnimplementedServiceChatServer()
}

func RegisterServiceChatServer(s grpc.ServiceRegistrar, srv ServiceChatServer) {
	s.RegisterService(&ServiceChat_ServiceDesc, srv)
}

func _ServiceChat_ChatA_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceChatServer).ChatA(&serviceChatChatAServer{stream})
}

type ServiceChat_ChatAServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceChatChatAServer struct {
	grpc.ServerStream
}

func (x *serviceChatChatAServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceChatChatAServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceChat_ChatB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceChatServer).ChatB(&serviceChatChatBServer{stream})
}

type ServiceChat_ChatBServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceChatChatBServer struct {
	grpc.ServerStream
}

func (x *serviceChatChatBServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceChatChatBServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceChat_ChatC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceChatServer).ChatC(&serviceChatChatCServer{stream})
}

type ServiceChat_ChatCServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceChatChatCServer struct {
	grpc.ServerStream
}

func (x *serviceChatChatCServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceChatChatCServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceChat_ServiceDesc is the grpc.ServiceDesc for ServiceChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chat.ServiceChat",
	HandlerType: (*ServiceChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatA",
			Handler:       _ServiceChat_ChatA_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatB",
			Handler:       _ServiceChat_ChatB_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatC",
			Handler:       _ServiceChat_ChatC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}
