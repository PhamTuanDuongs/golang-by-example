// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	ChatA(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatAClient, error)
	ChatB(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatBClient, error)
	ChatC(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatCClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) ChatA(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatAClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], "/Chat/ChatA", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatAClient{stream}
	return x, nil
}

type Chat_ChatAClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatChatAClient struct {
	grpc.ClientStream
}

func (x *chatChatAClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatAClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) ChatB(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatBClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], "/Chat/ChatB", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatBClient{stream}
	return x, nil
}

type Chat_ChatBClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatChatBClient struct {
	grpc.ClientStream
}

func (x *chatChatBClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatBClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) ChatC(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[2], "/Chat/ChatC", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatCClient{stream}
	return x, nil
}

type Chat_ChatCClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatChatCClient struct {
	grpc.ClientStream
}

func (x *chatChatCClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatCClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	ChatA(Chat_ChatAServer) error
	ChatB(Chat_ChatBServer) error
	ChatC(Chat_ChatCServer) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) ChatA(Chat_ChatAServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatA not implemented")
}
func (UnimplementedChatServer) ChatB(Chat_ChatBServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatB not implemented")
}
func (UnimplementedChatServer) ChatC(Chat_ChatCServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatC not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_ChatA_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ChatA(&chatChatAServer{stream})
}

type Chat_ChatAServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatChatAServer struct {
	grpc.ServerStream
}

func (x *chatChatAServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatAServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_ChatB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ChatB(&chatChatBServer{stream})
}

type Chat_ChatBServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatChatBServer struct {
	grpc.ServerStream
}

func (x *chatChatBServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatBServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_ChatC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ChatC(&chatChatCServer{stream})
}

type Chat_ChatCServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatChatCServer struct {
	grpc.ServerStream
}

func (x *chatChatCServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatCServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatA",
			Handler:       _Chat_ChatA_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatB",
			Handler:       _Chat_ChatB_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatC",
			Handler:       _Chat_ChatC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}
